apiVersion: v1
kind: Namespace
metadata:
  name: ale
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-agent
  namespace: ale
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-builder
  namespace: ale
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-controller
  namespace: ale
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sa-controller-rolebinding
  namespace: ale
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  name: sa-controller
  namespace: ale
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sa-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: sa-agent
  namespace: ale
---
apiVersion: v1
data:
  nginx.conf: "worker_processes auto;\n\nevents {\n  worker_connections 1024;\n}\n\nhttp
    {\n  include /etc/nginx/mime.types;\n  default_type application/octet-stream;\n
    \ sendfile on;\n  gzip on;\n\n  server {\n    index index.html;\n    root /app/html;\n\n
    \   set_real_ip_from 0.0.0.0/0;\n    real_ip_header X-Real-IP;\n    real_ip_recursive
    on;\n\n    resolver kube-dns.kube-system.svc.cluster.local valid=1s;\n    set
    $upstream_endpoint ale-controller.ale.svc.cluster.local:9009;\n\n    location
    /api/ {\n      rewrite ^/api(/.*)$ $1 break;\n      \n      proxy_set_header Upgrade
    $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n      proxy_set_header
    X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $remote_addr;\n
    \     proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header Host
    $host;\n\n      proxy_pass http://$upstream_endpoint;\n      proxy_redirect off;\n
    \   }\n\n    location / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header
    X-Forwarded-For $remote_addr;\n      proxy_set_header X-Forwarded-Proto $scheme;\n
    \     proxy_set_header Host $http_host;\n\n      try_files $uri $uri/ /index.html;\n
    \   }\n  }\n}\n"
kind: ConfigMap
metadata:
  name: ale-dashboard-configmap
  namespace: ale
---
apiVersion: v1
data:
  nginx.conf: "worker_processes auto;\n\nevents {\n  worker_connections 1024;\n}\n\nhttp
    {\n  include /etc/nginx/mime.types;\n  default_type application/octet-stream;\n
    \ sendfile on;\n  gzip on;\n\n  server {\n    index index.html;\n    root /app/html;\n\n
    \   set_real_ip_from 0.0.0.0/0;\n    real_ip_header X-Real-IP;\n    real_ip_recursive
    on;\n\n    resolver kube-dns.kube-system.svc.cluster.local valid=1s;\n    set
    $upstream_endpoint ale-controller-ops.ale.svc.cluster.local:9009;\n\n    location
    /api/ {\n      rewrite ^/api(/.*)$ $1 break;\n      \n      proxy_set_header Upgrade
    $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n      proxy_set_header
    X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $remote_addr;\n
    \     proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_set_header Host
    $host;\n\n      proxy_pass http://$upstream_endpoint;\n      proxy_redirect off;\n
    \   }\n\n    location / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header
    X-Forwarded-For $remote_addr;\n      proxy_set_header X-Forwarded-Proto $scheme;\n
    \     proxy_set_header Host $http_host;\n\n      try_files $uri $uri/ /index.html;\n
    \   }\n  }\n}\n"
kind: ConfigMap
metadata:
  name: ale-operator-configmap
  namespace: ale
---
apiVersion: v1
data:
  STAT_DB_NAME: c3RhdA==
  STAT_DB_URL: bW9uZ29kYjovLzEyNy4wLjAuMToyNzAxNy9zdGF0
kind: Secret
metadata:
  name: agent-secrets
  namespace: ale
type: Opaque
---
apiVersion: v1
data:
  MONGODB_DATABASE: YWxl
  MONGODB_URL: bW9uZ29kYjovL21vbmdvOjI3MDE3L2FsZQ==
kind: Secret
metadata:
  name: ale-secrets
  namespace: ale
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: agent
    module: agent
    service: ale
  name: ale-agent
  namespace: ale
spec:
  clusterIP: None
  ports:
  - appProtocol: http
    name: http
    port: 9800
    protocol: TCP
    targetPort: 9800
  - appProtocol: https
    name: https
    port: 9801
    protocol: TCP
    targetPort: 9801
  selector:
    app: agent
    module: agent
    service: ale
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: builder
    module: docker-daemon
    service: ale
  name: ale-build-daemon
  namespace: ale
spec:
  clusterIP: None
  ports:
  - port: 2376
    protocol: TCP
  selector:
    app: builder
    module: docker-daemon
    service: ale
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: controller
    module: controller
    service: ale
  name: ale-controller
  namespace: ale
spec:
  clusterIP: None
  ports:
  - port: 9009
    protocol: TCP
    targetPort: 9009
  selector:
    app: controller
    module: controller
    service: ale
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: controller
    module: controller-ops
    service: ale
  name: ale-controller-ops
  namespace: ale
spec:
  clusterIP: None
  ports:
  - port: 9009
    protocol: TCP
    targetPort: 9009
  selector:
    app: controller
    module: controller-ops
    service: ale
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: controller
    module: dashboard
    service: ale
  name: ale-dashboard
  namespace: ale
spec:
  clusterIP: None
  ports:
  - port: 80
    protocol: TCP
  selector:
    app: controller
    module: dashboard
    service: ale
---
apiVersion: v1
kind: Service
metadata:
  name: ale-operator
  namespace: ale
spec:
  clusterIP: None
  ports:
  - port: 80
    protocol: TCP
  selector:
    app: controller
    module: operator
    service: ale
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: database
    module: mongodb
    service: ale
  name: mongo
  namespace: ale
spec:
  clusterIP: None
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: database
    module: mongodb
    service: ale
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: database
    module: mongodb
    service: ale
  name: pvc-mongo
  namespace: ale
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: agent
    module: agent
    service: ale
  name: ale-agent
  namespace: ale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agent
      module: agent
      service: ale
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: agent
        module: agent
        service: ale
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - system
            weight: 1
      containers:
      - env:
        - name: NODE_ENV
          value: production
        - name: LOG_TIMESTAMPS
          value: "false"
        - name: LOG_LEVEL
          value: debug
        - name: STAT_DB_URL
          valueFrom:
            secretKeyRef:
              key: STAT_DB_URL
              name: agent-secrets
        - name: STAT_DB_NAME
          valueFrom:
            secretKeyRef:
              key: STAT_DB_NAME
              name: agent-secrets
        image: ghcr.io/ale-run/agent:dev
        imagePullPolicy: Always
        livenessProbe:
          tcpSocket:
            port: 9800
        name: agent
        ports:
        - containerPort: 9800
        - containerPort: 9801
        readinessProbe:
          tcpSocket:
            port: 9800
        resources:
          requests:
            cpu: 20m
            memory: 256Mi
        startupProbe:
          initialDelaySeconds: 5
          tcpSocket:
            port: 9800
      - image: mongo:4.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 27017
        name: mongo
        ports:
        - containerPort: 27017
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 27017
        resources:
          requests:
            cpu: 20m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
        startupProbe:
          initialDelaySeconds: 5
          tcpSocket:
            port: 27017
        volumeMounts:
        - mountPath: /data/db
          name: stat-cache-volume
          subPath: data
      serviceAccountName: sa-agent
      terminationGracePeriodSeconds: 5
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      volumes:
      - emptyDir:
          sizeLimit: 1Gi
        name: stat-cache-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: builder
    module: docker-daemon
    service: ale
  name: ale-build-daemon
  namespace: ale
spec:
  minReadySeconds: 10
  replicas: 1
  selector:
    matchLabels:
      app: builder
      module: docker-daemon
      service: ale
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: builder
        module: docker-daemon
        service: ale
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - system
            weight: 1
      containers:
      - env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
        image: docker:20-dind
        name: docker-dind
        ports:
        - containerPort: 2376
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
        securityContext:
          privileged: true
      serviceAccountName: sa-builder
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: controller
    module: controller
    service: ale
  name: ale-controller
  namespace: ale
spec:
  minReadySeconds: 10
  replicas: 1
  selector:
    matchLabels:
      app: controller
      module: controller
      service: ale
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: controller
        module: controller
        service: ale
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - system
            weight: 1
      containers:
      - env:
        - name: NODE_ENV
          value: production
        - name: LOG_TIMESTAMPS
          value: "false"
        - name: LOG_LEVEL
          value: debug
        - name: DB_URL
          valueFrom:
            secretKeyRef:
              key: MONGODB_URL
              name: ale-secrets
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              key: MONGODB_DATABASE
              name: ale-secrets
        image: ghcr.io/ale-run/server:dev
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - sleep
              - "5"
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 9009
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 180
        name: server
        ports:
        - containerPort: 9009
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 9009
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 180
        resources:
          limits:
            cpu: "2"
            memory: 2Gi
          requests:
            cpu: 10m
            memory: 128Mi
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: sa-controller
      terminationGracePeriodSeconds: 20
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: controller
    module: controller-ops
    service: ale
  name: ale-controller-ops
  namespace: ale
spec:
  minReadySeconds: 10
  replicas: 1
  selector:
    matchLabels:
      app: controller
      module: controller-ops
      service: ale
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: controller
        module: controller-ops
        service: ale
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - system
            weight: 1
      containers:
      - env:
        - name: NODE_ENV
          value: production
        - name: LOG_TIMESTAMPS
          value: "false"
        - name: LOG_LEVEL
          value: debug
        - name: DB_URL
          valueFrom:
            secretKeyRef:
              key: MONGODB_URL
              name: ale-secrets
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              key: MONGODB_DATABASE
              name: ale-secrets
        - name: AGENT_ENDPOINT
          value: https://ale-agent.ale.svc:9801
        - name: AGENT_TOKEN
          valueFrom:
            secretKeyRef:
              key: AGENT_TOKEN
              name: agent-secrets
        - name: MODE_OPS
          value: "true"
        image: ghcr.io/ale-run/server:dev
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - sleep
              - "5"
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 9009
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 180
        name: server
        ports:
        - containerPort: 9009
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 9009
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 180
        resources:
          limits:
            cpu: "2"
            memory: 2Gi
          requests:
            cpu: 10m
            memory: 128Mi
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: sa-controller
      terminationGracePeriodSeconds: 20
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: controller
    module: dashboard
    service: ale
  name: ale-dashboard
  namespace: ale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: controller
      module: dashboard
      service: ale
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: controller
        module: dashboard
        service: ale
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - system
            weight: 1
      containers:
      - image: ghcr.io/ale-run/dashboard:dev
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - sleep
              - "5"
        livenessProbe:
          httpGet:
            path: /
            port: 80
        name: dashboard
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: nginx-conf
          readOnly: true
          subPath: nginx.conf
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: sa-controller
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: nginx.conf
            path: nginx.conf
          name: ale-dashboard-configmap
        name: nginx-conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: controller
    module: operator
    service: ale
  name: ale-operator
  namespace: ale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: controller
      module: operator
      service: ale
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: controller
        module: operator
        service: ale
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - system
            weight: 1
      containers:
      - image: ghcr.io/ale-run/operator:dev
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - sleep
              - "5"
        livenessProbe:
          httpGet:
            path: /
            port: 80
        name: operator
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: nginx-conf
          readOnly: true
          subPath: nginx.conf
      enableServiceLinks: true
      restartPolicy: Always
      serviceAccountName: sa-controller
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: nginx.conf
            path: nginx.conf
          name: ale-operator-configmap
        name: nginx-conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: database
    module: mongodb
    service: ale
  name: mongo
  namespace: ale
spec:
  progressDeadlineSeconds: 600
  selector:
    matchLabels:
      app: database
      module: mongodb
      service: ale
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: database
        module: mongodb
        service: ale
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - system
            weight: 1
      containers:
      - image: mongo:4.0
        imagePullPolicy: IfNotPresent
        name: mongo
        ports:
        - containerPort: 27017
          protocol: TCP
        resources:
          requests:
            cpu: 20m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
        volumeMounts:
        - mountPath: /data/db
          name: mongo-volume
          subPath: data
      enableServiceLinks: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: OnRootMismatch
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: mongo-volume
        persistentVolumeClaim:
          claimName: pvc-mongo
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: controller
    module: controller
    service: ale
  name: server-hpa
  namespace: ale
spec:
  maxReplicas: 3
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 80
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: server
